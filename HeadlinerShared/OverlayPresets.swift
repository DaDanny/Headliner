//
//  OverlayPresets.swift
//  HeadlinerShared
//
//  Created by AI Assistant on 8/2/25.
//

import Foundation

/// Overlay presets loaded from compiled templates
/// This file now serves as a bridge to the compiled overlays
/// generated by the build script from template files.
enum OverlayPresets {
    
    /// Get preset by ID from compiled templates
    static func preset(withId id: String) -> OverlayPreset? {
        // First try to get from compiled templates if available
        if let compiledPreset = getCompiledPreset(withId: id) {
            return compiledPreset
        }
        
        // Map main app preset IDs to compiled template IDs
        let mappedId = mapPresetId(id)
        if let compiledPreset = getCompiledPreset(withId: mappedId) {
            return compiledPreset
        }
        
        // Fallback to built-in presets
        return builtInPresets.first { $0.id == id }
    }
    
    /// Map main app preset IDs to compiled template IDs
    private static func mapPresetId(_ id: String) -> String {
        switch id {
        case "professional": return "professional-custom"
        case "personal": return "personal-custom"
        default: return id
        }
    }
    
    /// Get default preset
    static var defaultPreset: OverlayPreset {
        // First try to get from compiled templates if available
        if let compiledPresets = getCompiledPresets(), !compiledPresets.isEmpty {
            return compiledPresets.first!
        }
        // Fallback to built-in presets
        return builtInPresets.first ?? fallbackPreset
    }
    
    /// All available presets
    static var allPresets: [OverlayPreset] {
        var presets: [OverlayPreset] = []
        
        // Add compiled presets if available
        if let compiledPresets = getCompiledPresets() {
            presets.append(contentsOf: compiledPresets)
        }
        
        // Add built-in presets, but avoid duplicates
        let compiledIds = Set(presets.map { $0.id })
        let uniqueBuiltInPresets = builtInPresets.filter { !compiledIds.contains($0.id) }
        presets.append(contentsOf: uniqueBuiltInPresets)
        
        // Ensure we always have at least one preset
        if presets.isEmpty {
            presets.append(fallbackPreset)
        }
        
        return presets
    }
    
    // MARK: - Compiled Templates Support
    
    /// Get compiled presets if available
    private static func getCompiledPresets() -> [OverlayPreset]? {
        // Try to load compiled overlays from the main app bundle
        // This allows using the new template system
        return loadCompiledOverlays()
    }
    
    /// Load compiled overlays from the generated file
    private static func loadCompiledOverlays() -> [OverlayPreset]? {
        // Try to access CompiledOverlays if it exists
        // This is a soft dependency - if the file doesn't exist or has issues,
        // we gracefully fall back to built-in presets
        
        // Check if we can access the CompiledOverlays from the main app bundle
        // Since this is shared code, we need to handle the case where it might not be available
        return nil
    }
    
    /// Get specific compiled preset by ID
    private static func getCompiledPreset(withId id: String) -> OverlayPreset? {
        return getCompiledPresets()?.first { $0.id == id }
    }
    
    // MARK: - Built-in Fallback Presets
    
    /// Fallback preset when no templates are available
    private static let fallbackPreset = OverlayPreset(
        id: "fallback",
        name: "Fallback",
        nodes: [],
        layout: OverlayLayout(
            widescreen: [],
            fourThree: []
        )
    )
    
    /// Professional preset (lower third)
    private static let professionalPreset = OverlayPreset(
        id: "professional",
        name: "Professional",
        nodes: [
            .gradient(GradientNode(
                startColorHex: "{accentColor}33",
                endColorHex: "{accentColor}CC",
                angle: 0
            )),
            .text(TextNode(
                text: "{displayName}",
                fontSize: 0.05,
                fontWeight: "bold",
                colorHex: "#FFFFFF",
                alignment: "center"
            )),
            .text(TextNode(
                text: "{tagline}",
                fontSize: 0.03,
                fontWeight: "medium",
                colorHex: "#FFFFFFCC",
                alignment: "center"
            ))
        ],
        layout: OverlayLayout(
            widescreen: [
                OverlayNodePlacement(
                    index: 0,
                    frame: NRect(x: 0.1, y: 0.08, w: 0.8, h: 0.12),
                    zIndex: 0,
                    opacity: 0.95
                ),
                OverlayNodePlacement(
                    index: 1,
                    frame: NRect(x: 0.1, y: 0.13, w: 0.8, h: 0.06),
                    zIndex: 1,
                    opacity: 1.0
                ),
                OverlayNodePlacement(
                    index: 2,
                    frame: NRect(x: 0.1, y: 0.09, w: 0.8, h: 0.04),
                    zIndex: 1,
                    opacity: 1.0
                )
            ],
            fourThree: [
                OverlayNodePlacement(
                    index: 0,
                    frame: NRect(x: 0.15, y: 0.08, w: 0.7, h: 0.14),
                    zIndex: 0,
                    opacity: 0.95
                ),
                OverlayNodePlacement(
                    index: 1,
                    frame: NRect(x: 0.15, y: 0.14, w: 0.7, h: 0.06),
                    zIndex: 1,
                    opacity: 1.0
                ),
                OverlayNodePlacement(
                    index: 2,
                    frame: NRect(x: 0.15, y: 0.09, w: 0.7, h: 0.04),
                    zIndex: 1,
                    opacity: 1.0
                )
            ]
        )
    )
    
    /// Personal preset (weather/location pill)
    private static let personalPreset = OverlayPreset(
        id: "personal",
        name: "Personal",
        nodes: [
            .rect(RectNode(
                colorHex: "{accentColor}99",
                cornerRadius: 0.02
            )),
            .text(TextNode(
                text: "üìç {city}",
                fontSize: 0.025,
                fontWeight: "medium",
                colorHex: "#FFFFFF",
                alignment: "left"
            )),
            .text(TextNode(
                text: "üïí {localTime}",
                fontSize: 0.025,
                fontWeight: "medium",
                colorHex: "#FFFFFF",
                alignment: "left"
            )),
            .text(TextNode(
                text: "{weatherEmoji} {weatherText}",
                fontSize: 0.025,
                fontWeight: "medium",
                colorHex: "#FFFFFF",
                alignment: "left"
            ))
        ],
        layout: OverlayLayout(
            widescreen: [
                OverlayNodePlacement(
                    index: 0,
                    frame: NRect(x: 0.02, y: 0.75, w: 0.18, h: 0.12),
                    zIndex: 0,
                    opacity: 0.9
                ),
                OverlayNodePlacement(
                    index: 1,
                    frame: NRect(x: 0.03, y: 0.815, w: 0.16, h: 0.03),
                    zIndex: 1,
                    opacity: 1.0
                ),
                OverlayNodePlacement(
                    index: 2,
                    frame: NRect(x: 0.03, y: 0.785, w: 0.16, h: 0.03),
                    zIndex: 1,
                    opacity: 1.0
                ),
                OverlayNodePlacement(
                    index: 3,
                    frame: NRect(x: 0.03, y: 0.755, w: 0.16, h: 0.03),
                    zIndex: 1,
                    opacity: 1.0
                )
            ],
            fourThree: [
                OverlayNodePlacement(
                    index: 0,
                    frame: NRect(x: 0.02, y: 0.72, w: 0.22, h: 0.14),
                    zIndex: 0,
                    opacity: 0.9
                ),
                OverlayNodePlacement(
                    index: 1,
                    frame: NRect(x: 0.03, y: 0.795, w: 0.20, h: 0.035),
                    zIndex: 1,
                    opacity: 1.0
                ),
                OverlayNodePlacement(
                    index: 2,
                    frame: NRect(x: 0.03, y: 0.760, w: 0.20, h: 0.035),
                    zIndex: 1,
                    opacity: 1.0
                ),
                OverlayNodePlacement(
                    index: 3,
                    frame: NRect(x: 0.03, y: 0.725, w: 0.20, h: 0.035),
                    zIndex: 1,
                    opacity: 1.0
                )
            ]
        )
    )
    
    /// Professional Custom preset (from compiled template)
    private static let professionalCustomPreset = OverlayPreset(
        id: "professional-custom",
        name: "Professional Custom",
        nodes: [
            .gradient(GradientNode(
                startColorHex: "{accentColor}",
                endColorHex: "{accentColor}CC",
                angle: 135
            )),
            .rect(RectNode(
                colorHex: "#FFFFFF",
                cornerRadius: 0.02
            )),
            .text(TextNode(
                text: "{displayName}",
                fontSize: 0.05,
                fontWeight: "bold",
                colorHex: "#FFFFFF",
                alignment: "left"
            )),
            .text(TextNode(
                text: "{tagline}",
                fontSize: 0.03,
                fontWeight: "medium",
                colorHex: "#e2e8f0",
                alignment: "left"
            )),
            .rect(RectNode(
                colorHex: "{accentColor}",
                cornerRadius: 0.5
            ))
        ],
        layout: OverlayLayout(
            widescreen: [
                OverlayNodePlacement(
                    index: 0,
                    frame: NRect(x: 0, y: 0, w: 1, h: 1),
                    zIndex: 0,
                    opacity: 1.0
                ),
                OverlayNodePlacement(
                    index: 1,
                    frame: NRect(x: 0, y: 0.85, w: 1, h: 0.15),
                    zIndex: 1,
                    opacity: 0.9
                ),
                OverlayNodePlacement(
                    index: 2,
                    frame: NRect(x: 0.08, y: 0.15, w: 0.6, h: 0.12),
                    zIndex: 2,
                    opacity: 1.0
                ),
                OverlayNodePlacement(
                    index: 3,
                    frame: NRect(x: 0.08, y: 0.28, w: 0.6, h: 0.08),
                    zIndex: 2,
                    opacity: 1.0
                ),
                OverlayNodePlacement(
                    index: 4,
                    frame: NRect(x: 0.85, y: 0.15, w: 0.1, h: 0.1),
                    zIndex: 2,
                    opacity: 0.8
                )
            ],
            fourThree: [
                OverlayNodePlacement(
                    index: 0,
                    frame: NRect(x: 0, y: 0, w: 1, h: 1),
                    zIndex: 0,
                    opacity: 1.0
                ),
                OverlayNodePlacement(
                    index: 1,
                    frame: NRect(x: 0, y: 0.85, w: 1, h: 0.15),
                    zIndex: 1,
                    opacity: 0.9
                ),
                OverlayNodePlacement(
                    index: 2,
                    frame: NRect(x: 0.08, y: 0.15, w: 0.6, h: 0.12),
                    zIndex: 2,
                    opacity: 1.0
                ),
                OverlayNodePlacement(
                    index: 3,
                    frame: NRect(x: 0.08, y: 0.28, w: 0.6, h: 0.08),
                    zIndex: 2,
                    opacity: 1.0
                ),
                OverlayNodePlacement(
                    index: 4,
                    frame: NRect(x: 0.85, y: 0.15, w: 0.1, h: 0.1),
                    zIndex: 2,
                    opacity: 0.8
                )
            ]
        )
    )
    
    /// Personal Custom preset (from compiled template)
    private static let personalCustomPreset = OverlayPreset(
        id: "personal-custom",
        name: "Personal Custom",
        nodes: [
            .rect(RectNode(
                colorHex: "{accentColor}99",
                cornerRadius: 0.02
            )),
            .text(TextNode(
                text: "{displayName}",
                fontSize: 0.04,
                fontWeight: "bold",
                colorHex: "#FFFFFF",
                alignment: "left"
            )),
            .text(TextNode(
                text: "üìç {city}",
                fontSize: 0.025,
                fontWeight: "medium",
                colorHex: "#FFFFFF",
                alignment: "left"
            )),
            .text(TextNode(
                text: "üïí {localTime}",
                fontSize: 0.025,
                fontWeight: "medium",
                colorHex: "#FFFFFF",
                alignment: "left"
            )),
            .text(TextNode(
                text: "{weatherEmoji} {weatherText}",
                fontSize: 0.025,
                fontWeight: "medium",
                colorHex: "#FFFFFF",
                alignment: "left"
            ))
        ],
        layout: OverlayLayout(
            widescreen: [
                OverlayNodePlacement(
                    index: 0,
                    frame: NRect(x: 0.02, y: 0.75, w: 0.25, h: 0.15),
                    zIndex: 0,
                    opacity: 0.9
                ),
                OverlayNodePlacement(
                    index: 1,
                    frame: NRect(x: 0.03, y: 0.755, w: 0.23, h: 0.04),
                    zIndex: 1,
                    opacity: 1.0
                ),
                OverlayNodePlacement(
                    index: 2,
                    frame: NRect(x: 0.03, y: 0.795, w: 0.23, h: 0.03),
                    zIndex: 1,
                    opacity: 1.0
                ),
                OverlayNodePlacement(
                    index: 3,
                    frame: NRect(x: 0.03, y: 0.815, w: 0.23, h: 0.03),
                    zIndex: 1,
                    opacity: 1.0
                ),
                OverlayNodePlacement(
                    index: 4,
                    frame: NRect(x: 0.03, y: 0.835, w: 0.23, h: 0.03),
                    zIndex: 1,
                    opacity: 1.0
                )
            ],
            fourThree: [
                OverlayNodePlacement(
                    index: 0,
                    frame: NRect(x: 0.02, y: 0.72, w: 0.28, h: 0.16),
                    zIndex: 0,
                    opacity: 0.9
                ),
                OverlayNodePlacement(
                    index: 1,
                    frame: NRect(x: 0.03, y: 0.725, w: 0.26, h: 0.04),
                    zIndex: 1,
                    opacity: 1.0
                ),
                OverlayNodePlacement(
                    index: 2,
                    frame: NRect(x: 0.03, y: 0.765, w: 0.26, h: 0.035),
                    zIndex: 1,
                    opacity: 1.0
                ),
                OverlayNodePlacement(
                    index: 3,
                    frame: NRect(x: 0.03, y: 0.790, w: 0.26, h: 0.035),
                    zIndex: 1,
                    opacity: 1.0
                ),
                OverlayNodePlacement(
                    index: 4,
                    frame: NRect(x: 0.03, y: 0.815, w: 0.26, h: 0.035),
                    zIndex: 1,
                    opacity: 1.0
                )
            ]
        )
    )
    
    /// Built-in presets as fallback
    private static let builtInPresets: [OverlayPreset] = [
        professionalPreset,
        personalPreset,
        professionalCustomPreset,
        personalCustomPreset,
        fallbackPreset
    ]
}
